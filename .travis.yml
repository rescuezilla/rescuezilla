language: minimal

# The build bot OS environment does not really matter, as the docker image
# provides the primary host environment for the build. However, a more recent
# OS provides a more recent Docker release, which means additional Docker
# functionality.
dist: bionic

services:
  - docker

# Launches Docker container to act as 'host system'. See BUILD.ISO.IMAGE.md for more information.
before_install:
  # Build an immutable docker image from the Dockerfile, labelled with a
  # meaningful tag
  #
  # On your local machine, if rebuilding the docker image, it's recommended to
  # first delete old build artifacts, and also to fix permissions on the pkg
  # caches by running: 
  # sudo make clean && sudo chown -R $(id -u):$(id -g) pkg.cache/
- docker build --tag builder.image .
  # Construct a (mutable) docker container from the docker image, give it
  # extended privileges (required for the chroot bind mount), label it with a
  # meaningful name, execute the application /bin/cat, so the container doesn't
  # automatically exit
- docker run --rm --detach --privileged --name=builder.container --volume=`pwd`:/home/rescuezilla/ --tty builder.image cat
script:
  # DANGER: Delete all untracked files and directories to ensure pristine env (do *not* use this on your working dir)
- git clean -dfX && git clean -dfx
  # DANGER: Do *not* use this on your working dir
- git reset --hard HEAD
  # Execute the Makefile's install target within the docker container. This step
  # may take some time. Hundreds of megabytes of packages are downloaded from the
  # Ubuntu mirror during a build.
- docker exec --interactive --tty --workdir=/home/rescuezilla/ builder.container make


# When a new tag is pushed, upload the ISO image as a draft release on GitHub

before_deploy:
  - mv build/rescuezilla.i386.iso build/redobackup-livecd-$TRAVIS_TAG.iso

deploy:
  provider: releases
  api_key: $GITHUB_TOKEN
  file: build/redobackup-livecd-$TRAVIS_TAG.iso
  draft: true
  skip_cleanup: true
  on:
    tags: true
